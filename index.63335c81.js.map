{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n// 'use strict';\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        if (initialState.length === 4 && initialState.every((row)=>row.length === 4)) {\n            this.initialState = initialState;\n            this.restart();\n        } else throw new Error(\"Initial state is not valid!\");\n    }\n    moveLeft() {\n        if (this.status === \"playing\") {\n            const resultState = this.state.map((arr)=>this.merge(arr, 0));\n            this.handleMove(resultState);\n        }\n    }\n    moveRight() {\n        if (this.status === \"playing\") {\n            const resultState = this.state.map((arr)=>this.merge(arr, 1));\n            this.handleMove(resultState);\n        }\n    }\n    moveUp() {\n        if (this.status === \"playing\") {\n            const rotatedState = this.rotateMatrix(this.state, 1);\n            const resultState = rotatedState.map((row)=>this.merge(row, 1));\n            const finalState = this.rotateMatrix(resultState, 0);\n            this.handleMove(finalState);\n        }\n    }\n    moveDown() {\n        if (this.status === \"playing\") {\n            const rotatedState = this.rotateMatrix(this.state, 1);\n            const resultState = rotatedState.map((row)=>this.merge(row, 0));\n            const finalState = this.rotateMatrix(resultState, 0);\n            this.handleMove(finalState);\n        }\n    }\n    handleMove(newState) {\n        if (this.isStateDifferent(newState)) {\n            this.state = newState;\n            this.firstMoveMade = true;\n            this.putNewNumber();\n            if (this.isGameOver()) this.status = \"lose\";\n            else if (this.isGameWon()) this.status = \"win\";\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.restart();\n        this.status = \"playing\";\n        this.putNewNumber();\n        this.putNewNumber();\n    }\n    restart() {\n        this.state = this.cloneState(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n        this.firstMoveMade = false;\n    }\n    cloneState(state) {\n        return state.map((row)=>[\n                ...row\n            ]);\n    }\n    isStateDifferent(newState) {\n        return JSON.stringify(this.state) !== JSON.stringify(newState);\n    }\n    getFirstMoveMade() {\n        return this.firstMoveMade;\n    }\n    getAvailableCell() {\n        const cells = [];\n        this.state.forEach((row, y)=>{\n            row.forEach((value, x)=>{\n                if (!value) cells.push({\n                    x: x,\n                    y: y\n                });\n            });\n        });\n        return cells;\n    }\n    generateNumber() {\n        return Math.random() < 0.9 ? 2 : 4;\n    }\n    putNewNumber() {\n        const availableCells = this.getAvailableCell();\n        if (availableCells.length > 0) {\n            const { x: x, y: y } = availableCells[Math.floor(Math.random() * availableCells.length)];\n            this.state[y][x] = this.generateNumber();\n        }\n    }\n    isGameOver() {\n        if (this.getAvailableCell().length === 0) {\n            const directions = [\n                ()=>this.testMove(this.moveLeft.bind(this)),\n                ()=>this.testMove(this.moveRight.bind(this)),\n                ()=>this.testMove(this.moveUp.bind(this)),\n                ()=>this.testMove(this.moveDown.bind(this))\n            ];\n            return directions.every((test)=>!test());\n        }\n        return false;\n    }\n    testMove(moveFunction) {\n        const originalState = this.cloneState(this.state);\n        moveFunction();\n        const moved = this.isStateDifferent(originalState);\n        this.state = originalState;\n        return moved;\n    }\n    isGameWon() {\n        return this.state.some((row)=>row.some((cell)=>cell === 2048));\n    }\n    rotateMatrix(matrix, clockwise) {\n        const N = matrix.length;\n        const result = Array.from({\n            length: N\n        }, ()=>Array(N).fill(0));\n        if (clockwise) {\n            for(let i = 0; i < N; i++)for(let j = 0; j < N; j++)result[j][N - 1 - i] = matrix[i][j];\n        } else {\n            for(let i = 0; i < N; i++)for(let j = 0; j < N; j++)result[N - 1 - j][i] = matrix[i][j];\n        }\n        return result;\n    }\n    merge(arr, direction) {\n        const input = direction ? [\n            ...arr\n        ].reverse() : [\n            ...arr\n        ];\n        const merged = [];\n        let score = 0;\n        const filtered = input.filter((x)=>x !== 0);\n        for(let i = 0; i < filtered.length; i++)if (filtered[i] === filtered[i + 1]) {\n            merged.push(filtered[i] * 2);\n            score += filtered[i] * 2;\n            i++;\n        } else merged.push(filtered[i]);\n        while(merged.length < arr.length)merged.push(0);\n        this.score += score;\n        return direction ? merged.reverse() : merged;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nfunction $09e991522ca7e64e$var$updateTable(state) {\n    const fieldRows = document.querySelectorAll(\".field-row\");\n    fieldRows.forEach((rowElement, rowIndex)=>{\n        const rowState = state[rowIndex];\n        rowState.forEach((cellState, columnIndex)=>{\n            const cellElement = rowElement.children[columnIndex];\n            cellElement.className = `field-cell field-cell--${cellState}`;\n            cellElement.innerText = cellState > 0 ? cellState : \"\";\n            if (cellState > 0) {\n                cellElement.classList.add(\"merge\");\n                setTimeout(()=>cellElement.classList.remove(\"merge\"), 600);\n            }\n        });\n    });\n}\nfunction $09e991522ca7e64e$var$updateScore(score) {\n    document.querySelector(\".game-score\").innerText = score;\n}\nfunction $09e991522ca7e64e$var$updateButton(firstMoveMade) {\n    if (firstMoveMade) {\n        $09e991522ca7e64e$var$button.className = \"button restart\";\n        $09e991522ca7e64e$var$button.innerText = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$button.className = \"button start\";\n        $09e991522ca7e64e$var$button.innerText = \"Start\";\n    }\n}\nfunction $09e991522ca7e64e$var$updateMessage(gameStatus) {\n    const messageClasses = {\n        idle: \"message-start\",\n        win: \"message-win\",\n        lose: \"message-lose\"\n    };\n    document.querySelectorAll(\".message\").forEach((message)=>{\n        message.classList.add(\"hidden\");\n    });\n    const messageClass = messageClasses[gameStatus];\n    if (messageClass) document.querySelector(`.${messageClass}`).classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$update() {\n    $09e991522ca7e64e$var$updateTable($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$game.getScore());\n    $09e991522ca7e64e$var$updateButton($09e991522ca7e64e$var$game.getFirstMoveMade());\n    $09e991522ca7e64e$var$updateMessage($09e991522ca7e64e$var$game.getStatus());\n}\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    switch($09e991522ca7e64e$var$button.innerText){\n        case \"Start\":\n            $09e991522ca7e64e$var$game.start();\n            break;\n        case \"Restart\":\n            $09e991522ca7e64e$var$game.restart();\n    }\n    $09e991522ca7e64e$var$update();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    const actions = {\n        ArrowUp: ()=>$09e991522ca7e64e$var$game.moveUp(),\n        ArrowRight: ()=>$09e991522ca7e64e$var$game.moveRight(),\n        ArrowDown: ()=>$09e991522ca7e64e$var$game.moveDown(),\n        ArrowLeft: ()=>$09e991522ca7e64e$var$game.moveLeft()\n    };\n    const action = actions[e.key];\n    if (action) {\n        e.preventDefault();\n        action();\n    }\n    $09e991522ca7e64e$var$update();\n});\n\n\n//# sourceMappingURL=index.63335c81.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\nfunction updateTable(state) {\n  const fieldRows = document.querySelectorAll('.field-row');\n\n  fieldRows.forEach((rowElement, rowIndex) => {\n    const rowState = state[rowIndex];\n\n    rowState.forEach((cellState, columnIndex) => {\n      const cellElement = rowElement.children[columnIndex];\n\n      cellElement.className = `field-cell field-cell--${cellState}`;\n      cellElement.innerText = cellState > 0 ? cellState : '';\n\n      if (cellState > 0) {\n        cellElement.classList.add('merge');\n\n        setTimeout(() => cellElement.classList.remove('merge'), 600);\n      }\n    });\n  });\n}\n\nfunction updateScore(score) {\n  document.querySelector('.game-score').innerText = score;\n}\n\nfunction updateButton(firstMoveMade) {\n  if (firstMoveMade) {\n    button.className = 'button restart';\n    button.innerText = 'Restart';\n  } else {\n    button.className = 'button start';\n    button.innerText = 'Start';\n  }\n}\n\nfunction updateMessage(gameStatus) {\n  const messageClasses = {\n    idle: 'message-start',\n    win: 'message-win',\n    lose: 'message-lose',\n  };\n\n  document.querySelectorAll('.message').forEach((message) => {\n    message.classList.add('hidden');\n  });\n\n  const messageClass = messageClasses[gameStatus];\n\n  if (messageClass) {\n    document.querySelector(`.${messageClass}`).classList.remove('hidden');\n  }\n}\n\nfunction update() {\n  updateTable(game.getState());\n  updateScore(game.getScore());\n  updateButton(game.getFirstMoveMade());\n  updateMessage(game.getStatus());\n}\n\nconst button = document.querySelector('.button');\n\nbutton.addEventListener('click', () => {\n  switch (button.innerText) {\n    case 'Start':\n      game.start();\n      break;\n    case 'Restart':\n      game.restart();\n  }\n\n  update();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  const actions = {\n    ArrowUp: () => game.moveUp(),\n    ArrowRight: () => game.moveRight(),\n    ArrowDown: () => game.moveDown(),\n    ArrowLeft: () => game.moveLeft(),\n  };\n\n  const action = actions[e.key];\n\n  if (action) {\n    e.preventDefault();\n    action();\n  }\n\n  update();\n});\n","// 'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    if (\n      initialState.length === 4 &&\n      initialState.every((row) => row.length === 4)\n    ) {\n      this.initialState = initialState;\n      this.restart();\n    } else {\n      throw new Error('Initial state is not valid!');\n    }\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const resultState = this.state.map((arr) => this.merge(arr, 0));\n      this.handleMove(resultState);\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      const resultState = this.state.map((arr) => this.merge(arr, 1));\n      this.handleMove(resultState);\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      const rotatedState = this.rotateMatrix(this.state, 1);\n      const resultState = rotatedState.map((row) => this.merge(row, 1));\n      const finalState = this.rotateMatrix(resultState, 0);\n      this.handleMove(finalState);\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'playing') {\n      const rotatedState = this.rotateMatrix(this.state, 1);\n      const resultState = rotatedState.map((row) => this.merge(row, 0));\n      const finalState = this.rotateMatrix(resultState, 0);\n      this.handleMove(finalState);\n    }\n  }\n\n  handleMove(newState) {\n    if (this.isStateDifferent(newState)) {\n      this.state = newState;\n      this.firstMoveMade = true;\n      this.putNewNumber();\n\n      if (this.isGameOver()) {\n        this.status = 'lose';\n      } else if (this.isGameWon()) {\n        this.status = 'win';\n      }\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.restart();\n    this.status = 'playing';\n    this.putNewNumber();\n    this.putNewNumber();\n  }\n\n  restart() {\n    this.state = this.cloneState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n    this.firstMoveMade = false;\n  }\n\n  cloneState(state) {\n    return state.map(row => [...row]);\n  }\n\n  isStateDifferent(newState) {\n    return JSON.stringify(this.state) !== JSON.stringify(newState);\n  }\n\n  getFirstMoveMade() {\n    return this.firstMoveMade;\n  }\n\n  getAvailableCell() {\n    const cells = [];\n    this.state.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (!value) {\n          cells.push({ x, y });\n        }\n      });\n    });\n    return cells;\n  }\n\n  generateNumber() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  putNewNumber() {\n    const availableCells = this.getAvailableCell();\n    if (availableCells.length > 0) {\n      const { x, y } = availableCells[Math.floor(Math.random() * availableCells.length)];\n      this.state[y][x] = this.generateNumber();\n    }\n  }\n\n  isGameOver() {\n    if (this.getAvailableCell().length === 0) {\n      const directions = [\n        () => this.testMove(this.moveLeft.bind(this)),\n        () => this.testMove(this.moveRight.bind(this)),\n        () => this.testMove(this.moveUp.bind(this)),\n        () => this.testMove(this.moveDown.bind(this))\n      ];\n      return directions.every(test => !test());\n    }\n    return false;\n  }\n\n  testMove(moveFunction) {\n    const originalState = this.cloneState(this.state);\n    moveFunction();\n    const moved = this.isStateDifferent(originalState);\n    this.state = originalState;\n    return moved;\n  }\n\n  isGameWon() {\n    return this.state.some(row => row.some(cell => cell === 2048));\n  }\n\n  rotateMatrix(matrix, clockwise) {\n    const N = matrix.length;\n    const result = Array.from({ length: N }, () => Array(N).fill(0));\n\n    if (clockwise) {\n      for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n          result[j][N - 1 - i] = matrix[i][j];\n        }\n      }\n    } else {\n      for (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n          result[N - 1 - j][i] = matrix[i][j];\n        }\n      }\n    }\n    return result;\n  }\n\n  merge(arr, direction) {\n    const input = direction ? [...arr].reverse() : [...arr];\n    const merged = [];\n    let score = 0;\n\n    const filtered = input.filter(x => x !== 0);\n\n    for (let i = 0; i < filtered.length; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        merged.push(filtered[i] * 2);\n        score += filtered[i] * 2;\n        i++;\n      } else {\n        merged.push(filtered[i]);\n      }\n    }\n\n    while (merged.length < arr.length) {\n      merged.push(0);\n    }\n\n    this.score += score;\n    return direction ? merged.reverse() : merged;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","length","every","row","restart","Error","moveLeft","status","resultState","state","map","arr","merge","handleMove","moveRight","moveUp","rotatedState","rotateMatrix","finalState","moveDown","newState","isStateDifferent","firstMoveMade","putNewNumber","isGameOver","isGameWon","getScore","score","getState","getStatus","start","cloneState","JSON","stringify","getFirstMoveMade","getAvailableCell","cells","forEach","y","value","x","push","generateNumber","Math","random","availableCells","floor","directions","testMove","bind","test","moveFunction","originalState","moved","some","cell","matrix","clockwise","N","result","Array","from","fill","i","j","direction","input","reverse","merged","filtered","filter","$09e991522ca7e64e$var$update","fieldRows","document","querySelectorAll","rowElement","rowIndex","rowState","cellState","columnIndex","cellElement","children","className","innerText","classList","add","setTimeout","remove","querySelector","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$updateMessage","gameStatus","message","messageClass","messageClasses","idle","win","lose","addEventListener","e","action","actions","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","key","preventDefault"],"version":3,"file":"index.63335c81.js.map"}